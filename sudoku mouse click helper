def onAppStart(app):
    app.rows = 6
    app.cols = 5
    app.boardLeft = 75
    app.boardTop = 50
    app.boardWidth = 250
    app.boardHeight = 300
    app.cellBorderWidth = 2
    app.board = [([None] * app.cols) for row in range(app.rows)]
    loadTetrisPieces(app)
    loadPiece(app, 0)
    
def loadPiece(app, pieceIndex):
    app.piece = app.tetrisPieces[pieceIndex]
    app.pieceTopRow = 0
    app.pieceLeftCol = app.cols //2 - len(app.piece[0])//2
    app.pieceColor = app.tetrisPieceColors[pieceIndex]
    
def redrawAll(app):
    drawLabel("Tetris (Step 2)",200,30,size = 16)
    drawBoard(app)
    drawPiece(app)
    drawBoardBorder(app)
    
def drawBoard(app):
    for row in range(app.rows):
        for col in range(app.cols):
            drawCell(app, row, col,app.board[row][col])

def drawPiece(app):
    for row in range(len(app.piece)):
        for col in range(len(app.piece[0])):
            if app.piece[row][col]:
                drawCell(app, row, col+app.pieceLeftCol,app.pieceColor)

def drawBoardBorder(app):
    drawRect(app.boardLeft, app.boardTop, app.boardWidth, app.boardHeight,
             fill = None, border = 'black', borderWidth = 2*app.cellBorderWidth)

def drawCell(app, row, col, color):
    cellLeft, cellTop = getCellLeftTop(app, row, col)
    cellWidth, cellHeight = getCellSize(app)
    drawRect(cellLeft, cellTop, cellWidth, cellHeight, fill = color, 
             border = 'black', borderWidth = app.cellBorderWidth)

def getCellLeftTop(app, row, col):
    cellWidth, cellHeight = getCellSize(app)
    cellLeft = app.boardLeft + col * cellWidth
    cellTop = app.boardTop + row * cellHeight
    return (cellLeft, cellTop)
    
def getCellSize(app):
    cellWidth = app.boardWidth / app.cols
    cellHeight = app.boardHeight / app.rows
    return (cellWidth, cellHeight)
    
def onKeyPress(app, key):
    for i in range(7):
        if key == str(i):
            loadPiece(app, int(key))